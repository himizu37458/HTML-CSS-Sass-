Sass
記法：sass と scss（scssを基本にしてsassコマンドでcssに変換するとうやり方が主流）

ターミナルコマンドでcssへの変換をする（ディレクトリ注意）
sass scss/main.scss:css/main.css （入れ子構造のまま変換）
less css/main.css （ターミナル上で表示/qで逃げ）
sass --style expanded scss/main.scss:css/main.css
（cssの記述により近づけて表示/同じファイルを指定した場合上書き）
sass --style expanded --watch scss:css
(自動でディレクトリ間の変更をするオプション）
⭐️自動変換はエラーが出たらターミナル入り直すべし！

ネスト構造（入れ子構造の記法）

親セレクタを参照する &（アンパサンド）
クラス名全部書く必要がなくなる

#{}は{}の中身を展開しなさいという使い方＝変数の展開や数値の計算に使用できる

@debug 数値だけ確認できる

sassが初めからもっている関数は sass built-in functionsで検索

変数/データ型（数値、文字列、真偽、色、リスト）
変数の宣言は、$変数名: ~;
・演算　+ - *
・文字列　""で文字列は囲む
・色　lighten,darken(指定, 0-100%)明るさの調整ができる

条件分岐 @if @else で処理のところにcssを記入（）はいらないから注意

繰り返し
@for
@for $i from 10 through 14 {
  .fs#{$i} { font-size: #{$i}px; }
}
@while
$i: 10;
@while $i <= 14 {
  .fs#{$i} { font-size: #{$i}px; }
  $i: $i + 1; //$i++は使えないから注意！
}

リスト　似たようなデータをまとめて管理できる
@each 個々の変数　in 変数 {　処理 }

関数　複数の処理をまとめて管理
@function 関数名(引数) {処理 @return}
関数内で定義した変数はその中でしか使えない＝ローカル変数

パーシャルズ:sassで別ファイルで管理する時　_でファイル名を始める。部分的ファイルとして認識される。
読み込みは@import "ファイル名";

@mixin　処理ではなくcssの設定をまとめて一つの名称で管理できる
@mixin round($radius: 4px) {} このように引数と初期値も設定できる
使用する時は　@include 名称　で呼び出す

@extend 継承（同じcssの記述を重複しないよう継承できる）


